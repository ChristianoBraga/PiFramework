---| Pi Framework, beta
---| Christiano Braga
---| August, 2021

fmod STACK{X :: TRIV} is 
     inc LIST{X} * (op __ to _::_, op nil to empty) .
     sort Stack{X} .
     op [_] : List{X} -> Stack{X} . 
     op [] : -> Stack{X} .
     op push : Stack{X} X$Elt -> Stack{X} .
     op pop : Stack{X} -> Stack{X} .
     op top : Stack{X} ~> X$Elt .
     var L : List{X} . var E : X$Elt .
     eq [empty] = [] .
     eq push([], E) = [E] .
     eq push([L], E) = [L :: E] .
     eq pop([]) = [] .
     eq pop([L :: E]) = [L] .
     eq top([L :: E]) = E .
endfm

fmod INDEX is sort Idx . endfm
view Idx from TRIV to INDEX is sort Elt to Idx . endv

fmod SEM-COMP is sort SemComp . endfm 
view SemComp from TRIV to SEM-COMP is sort Elt to SemComp . endv

fmod BASIC-PI-IR is 
     sorts OpCode Statement .
endfm
view Statement from TRIV to BASIC-PI-IR is sort Elt to Statement . endv

fmod RECORD{X :: TRIV, Y :: TRIV} is 
     sorts Field{X, Y} PreRecord{X, Y} Record{X, Y} .
     subsort Field{X, Y} < PreRecord{X, Y} .
     op __ : X$Elt Y$Elt ~> Field{X, Y} [prec 20] . 
     op empty : -> PreRecord{X, Y} .
     op _,_ : PreRecord{X, Y} PreRecord{X, Y} -> PreRecord{X, Y} 
                              [prec 40 assoc comm id: empty format(d d nss d)] .
     op [_] : PreRecord{X, Y} -> Record{X, Y} [format (n s s d)] .
endfm

fmod PI-AUTOMATON is
     inc BASIC-PI-IR .
     inc RECORD{Idx, SemComp} * (sort Record{Idx, SemComp} to State,
                                 sort PreRecord{Idx, SemComp} to PreState) .
     sort FinalState .
     subsort FinalState < State .
     op run : State -> State [iter] .
     op run* : State -> State .
     op exec : Statement -> State .
     var S : State . var F : FinalState .
     eq run*(F) = F .
     eq run*(S) = run*(run(S)) .
endfm

fmod CONTROL is
     sort Control .
endfm
view Control from TRIV to CONTROL is sort Elt to Control . endv

fmod VALUE is 
     sort Value .
endfm
view Value from TRIV to VALUE is sort Elt to Value . endv

fmod BASIC-VALUES is 
     inc VALUE . inc RAT . 
     inc BOOL . inc STRING .
     inc FLOAT .
     op val : Rat -> Value [format(! o)] .
     op val : Bool -> Value [format(! o)] .
     op val : String -> Value [format(! o)] .
     op val : Float -> Value [format(! o)] .
endfm

fmod EXP-IR is 
     inc BASIC-PI-IR . inc VALUE .
     sort Exp .
     subsort Exp < Statement .
     op exp : Value -> Exp .
     ops sum sub mul div lth leq 
         gth geq equ lor lan : Exp Exp -> Exp [format (y o)] .
     op not : Exp -> Exp [format (y o)] .
     op ite : Exp Exp Exp -> Exp [format (y o)] .
endfm

fmod CONTROL-STACK-COMPONENT is 
     inc BASIC-PI-IR . inc CONTROL .
     inc INDEX . inc SEM-COMP .
     inc STACK{Control} * (op [] to mtCnt) .
     subsort OpCode < Control .
     op cnt : -> Idx [format (b! o)] .
     op :_ : Stack{Control} -> SemComp .
endfm

fmod VALUE-STACK-COMPONENT is 
     inc VALUE . inc INDEX .
     inc SEM-COMP .
     inc STACK{Value} * (op [] to mtVal) .
     op val : -> Idx [format (b! o)] .
     op :_ : Stack{Value} -> SemComp .
endfm
     
fmod EXP-AUTOMATON is 
     inc BOOL . inc EXP-IR .
     inc PI-AUTOMATON . inc BASIC-VALUES .
     inc CONTROL-STACK-COMPONENT .
     inc VALUE-STACK-COMPONENT .

     ops #SUM #MUL #DIV #SUB #LTH #LEQ #ITE
         #GTH #GEQ #EQU #NOT #LOR #LAN : -> OpCode .

     op cnt : Exp -> Control .
     op val : Exp -> Value .

     var L : List{Control} . var C : Stack{Control} .
     var V : Stack{Value} . var M : List{Value} .
     vars E E1 E2 E3 : Exp . var ... : PreState .
     var U : Value . 
     vars R R1 R2 : Rat . vars F F1 F2 : Float .
     vars B B1 B2 : Bool . vars S S1 S2 : String .

     ---| Control stack component is a record field.
     mb (cnt : C) : Field{Idx, SemComp} .

     ---| Value stack component is a record field.
     mb (val : V) : Field{Idx, SemComp} .

     ---| A final state is reached when the control stack is empty.
     mb [cnt : mtCnt, ...] : FinalState .

     ---| Basic values
     eq run( [ cnt : [ L :: cnt(exp(U)) ], 
               val : V , 
               ... ] ) =
             [ cnt : [ L ], 
               val : push(V, U), 
               ... ] .

     ---| ITE
     eq run( [ cnt : [ L :: cnt(ite(E1, E2, E3)) ],
               val : V,
               ... ] ) =
             [ cnt : push(push([ L ], #ITE), cnt(E1)),
               val : push(push(V, val(E3)), val(E2)),
               ... ]  . 

     eq run( [ cnt : [ L :: #ITE ],
               val : [ M :: val(E3) :: val(E2) :: val(true) ],
               ... ] ) =  
             [ cnt : [ L :: cnt(E2)],
               val : [ M ],
               ... ] .

     eq run( [ cnt : [ L :: #ITE ],
               val : [ M :: val(E3) :: val(E2) :: val(false) ],
               ... ] ) =  
             [ cnt : [ L :: cnt(E3)],
               val : [ M ],
               ... ] .

     ---| Arithmetic
     eq run( [ cnt : [ L :: cnt(sum(E1, E2)) ], ... ] ) =
             [ cnt : [ L :: #SUM :: cnt(E2) :: cnt(E1) ] , ... ] .


     eq run( [ cnt : [ L :: #SUM ], 
               val : [ M :: val(R1) :: val(R2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(R1 + R2) ], 
               ... ] .

     eq run( [ cnt : [ L :: #SUM ], 
               val : [ M :: val(F1) :: val(F2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(F1 + F2) ], 
               ... ] .

     eq run( [ cnt : [ L :: #SUM ], 
               val : [ M :: val(S1) :: val(S2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(S1 + S2) ], 
               ... ] .

     eq run( [ cnt : [ L :: cnt(sub(E1, E2)) ], ... ] ) =
             [ cnt : [ L :: #SUB :: cnt(E2) :: cnt(E1) ] , ... ] .


     eq run( [ cnt : [ L :: #SUB ], 
               val : [ M :: val(R1) :: val(R2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(R1 - R2) ], 
               ... ] .

     eq run( [ cnt : [ L :: #SUB ], 
               val : [ M :: val(F1) :: val(F2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(F1 - F2) ], 
               ... ] .

     eq run( [ cnt : [ L :: cnt(mul(E1, E2)) ], ... ] ) =
             [ cnt : [ L :: #MUL :: cnt(E2) :: cnt(E1) ] , ... ] .


     eq run( [ cnt : [ L :: #MUL ], 
               val : [ M :: val(R1) :: val(R2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(R1 * R2) ], 
               ... ] .

     eq run( [ cnt : [ L :: #MUL ], 
               val : [ M :: val(F1) :: val(F2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(F1 * F2) ], 
               ... ] .

     eq run( [ cnt : [ L :: cnt(div(E1, E2)) ], ... ] ) =
             [ cnt : [ L :: #DIV :: cnt(E2) :: cnt(E1) ] , ... ] .


     eq run( [ cnt : [ L :: #DIV ], 
               val : [ M :: val(R1) :: val(R2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(R1 / R2) ], 
               ... ] .

     eq run( [ cnt : [ L :: #DIV ], 
               val : [ M :: val(F1) :: val(F2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(F1 / F2) ], 
               ... ] .

     ---| Logical operators
     eq run( [ cnt : [ L :: cnt(lth(E1, E2)) ], ... ] ) =
             [ cnt : [ L :: #LTH :: cnt(E2) :: cnt(E1) ] , ... ] .

     eq run( [ cnt : [ L :: #LTH ], 
               val : [ M :: val(R1) :: val(R2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(R1 < R2) ], 
               ... ] .

     eq run( [ cnt : [ L :: #LTH ], 
               val : [ M :: val(F1) :: val(F2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(F1 < F2) ], 
               ... ] .

     eq run( [ cnt : [ L :: #LTH ], 
               val : [ M :: val(S1) :: val(S2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(S1 < S2) ], 
               ... ] .

     eq run( [ cnt : [ L :: cnt(leq(E1, E2)) ], ... ] ) =
             [ cnt : [ L :: #LEQ :: cnt(E2) :: cnt(E1) ] , ... ] .

     eq run( [ cnt : [ L :: #LEQ ], 
               val : [ M :: val(R1) :: val(R2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(R1 <= R2) ], 
               ... ] .

     eq run( [ cnt : [ L :: #LEQ ], 
               val : [ M :: val(F1) :: val(F2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(F1 <= F2) ], 
               ... ] .

     eq run( [ cnt : [ L :: #LEQ ], 
               val : [ M :: val(S1) :: val(S2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(S1 <= S2) ], 
               ... ] .

     eq run( [ cnt : [ L :: cnt(gth(E1, E2)) ], ... ] ) =
             [ cnt : [ L :: #GTH :: cnt(E2) :: cnt(E1) ] , ... ] .

     eq run( [ cnt : [ L :: #GTH ], 
               val : [ M :: val(R1) :: val(R2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(R1 > R2) ], 
               ... ] .

     eq run( [ cnt : [ L :: #GTH ], 
               val : [ M :: val(F1) :: val(F2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(F1 > F2) ], 
               ... ] .

     eq run( [ cnt : [ L :: #GTH ], 
               val : [ M :: val(S1) :: val(S2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(S1 > S2) ], 
               ... ] .

     eq run( [ cnt : [ L :: cnt(geq(E1, E2)) ], ... ] ) =
             [ cnt : [ L :: #GEQ :: cnt(E2) :: cnt(E1) ] , ... ] .

     eq run( [ cnt : [ L :: #GEQ ], 
               val : [ M :: val(R1) :: val(R2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(R1 >= R2) ], 
               ... ] .

     eq run( [ cnt : [ L :: #GEQ ], 
               val : [ M :: val(F1) :: val(F2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(F1 >= F2) ], 
               ... ] .

     eq run( [ cnt : [ L :: #GEQ ], 
               val : [ M :: val(S1) :: val(S2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(S1 >= S2) ], 
               ... ] .

     eq run( [ cnt : [ L :: cnt(equ(E1, E2)) ], ... ] ) =
             [ cnt : [ L :: #EQU :: cnt(E2) :: cnt(E1) ] , ... ] .

     eq run( [ cnt : [ L :: #EQU ], 
               val : [ M :: val(R1) :: val(R2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(R1 == R2) ], 
               ... ] .

     eq run( [ cnt : [ L :: #EQU ], 
               val : [ M :: val(B1) :: val(B2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(B1 == B2) ], 
               ... ] .

     eq run( [ cnt : [ L :: #EQU ], 
               val : [ M :: val(F1) :: val(F2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(F1 == F2) ], 
               ... ] .

     eq run( [ cnt : [ L :: #EQU ], 
               val : [ M :: val(S1) :: val(S2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(S1 == S2) ], 
               ... ] .
     eq run( [ cnt : [ L :: cnt(lor(E1, E2)) ], ... ] ) =
             [ cnt : [ L :: #LOR :: cnt(E2) :: cnt(E1) ] , ... ] .

     eq run( [ cnt : [ L :: #LOR ], 
               val : [ M :: val(B1) :: val(B2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(B1 or B2) ], 
               ... ] .

     eq run( [ cnt : [ L :: cnt(lan(E1, E2)) ], ... ] ) =
             [ cnt : [ L :: #LAN :: cnt(E2) :: cnt(E1) ] , ... ] .

     eq run( [ cnt : [ L :: #LAN ], 
               val : [ M :: val(B1) :: val(B2) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(B1 and B2) ], 
               ... ] .

     eq run( [ cnt : [ L :: cnt(not(E)) ], ... ] ) =
             [ cnt : [ L :: #NOT :: cnt(E) ] , ... ] .

     eq run( [ cnt : [ L :: #NOT ], 
               val : [ M :: val(B) ], 
               ... ] ) =
             [ cnt : [ L ], 
               val : [ M  :: val(not B) ], 
               ... ] .
endfm

fmod ID-IR is 
     inc QID .
     inc EXP-IR .
     sort Id .
     op id : Qid -> Id [format (! o)] .
     op exp : Id -> Exp .
endfm
view Id from TRIV to ID-IR is sort Elt to Id . endv

fmod BINDABLE is
     sort Bindable .
endfm
view Bindable from TRIV to BINDABLE is sort Elt to Bindable . endv

fmod ENV is 
     inc MAP{Id, Bindable} * (sort Map{Id, Bindable} to Env, 
                              op empty to mtEnv) .

     ---| Updates rho1 with entries from rho2 by overwriting 
     ---| values of common indices with values from rho2,
     ---| adding entries from rho2 which are not common to both,
     ---| preserving entries from rho1 which are not common to both.
     op update : Env Env -> Env .
     vars rho rho1 rho2 : Env . vars I I1 I2 : Id . vars Bnd1 Bnd2 : Bindable .  
     eq update(mtEnv, rho) = rho .
     eq update(rho, mtEnv) = rho .
     eq update((I1 |-> Bnd1, rho1), (I1 |-> Bnd2, rho2)) = (I1 |-> Bnd2), update(rho1, rho2) .
     eq update((I1 |-> Bnd1, rho1), (I2 |-> Bnd2, rho2)) = 
        (I1 |-> Bnd1), (I2 |-> Bnd2), update(rho1, rho2) [owise] .
endfm

fmod BASIC-ENV is 
     inc ENV . inc VALUE .
     op bnd : Value -> Bindable .
     op getVal : Bindable -> Value .
     var V : Value .
     eq getVal(bnd(V)) = V .
endfm

fmod ENV-COMPONENT is 
     inc INDEX . inc SEM-COMP .
     inc ENV .
     op env : -> Idx [format (b! o)] .
     op :_ : Env -> SemComp .
endfm

fmod EXP-WITH-ID-AUTOMATON is 
     inc ID-IR . inc BASIC-ENV .
     inc EXP-AUTOMATON . inc ENV-COMPONENT .

     op val : Id -> Value .

     var rho : Env . var I : Id .
     var L : List{Control} . var V : Stack{Value} . 
     var ... : PreState . 

     ---| Env component is a record field.
     mb (env : rho) : Field{Idx, SemComp} .

     eq run( [ cnt : [ L :: cnt(exp(I)) ], 
               val : V , 
               env : rho,
               ... ] ) =
             [ cnt : [ L ], 
               val : push(V, getVal(rho[I])), 
               env : rho,
               ... ] .
endfm

fmod LOCATION is sort Loc . endfm
view Loc from TRIV to LOCATION is sort Elt to Loc . endv

fmod LOC-SET is
     inc SET{Loc} * (op empty to noLoc, op _,_ to _;_) . 
endfm

fmod STORABLE is sort Storable . endfm
view Storable from TRIV to STORABLE is sort Elt to Storable . endv

fmod STORE is 
     inc NAT .
     inc LOC-SET .
     inc MAP{Loc, Storable} * (sort Map{Loc, Storable} to Store, 
                               sort Entry{Loc, Storable} to Cell, 
                               op empty to mtStore) .
     op loc : Nat -> Loc [format(! o)] .
     op new : Store -> Loc .
     op mod : Store Set{Loc} -> Store .
     op largestLoc : Store -> Nat . 
     op $largestLoc : Store Nat -> Nat . 
     var S : Store . vars L N : Nat . var V : Storable .
     var SL : Set{Loc} . vars O O' : Loc .

     eq largestLoc(S) = $largestLoc(S, 0) .
     eq $largestLoc(mtStore, N) = N .
     eq $largestLoc((loc(L) |-> V, S), N) = 
        if L > N then $largestLoc(S, L) else $largestLoc(S, N) fi .

     eq new(S) = loc(largestLoc(S) + 1) .

     eq mod(mtStore, SL) = mtStore .
     eq mod(S, noLoc) = S .
     eq mod((O |-> V, S), (O' ; SL)) = 
        if O =/= O' 
        then ((O |-> V), mod(S, (O' ; SL)))
        else mod(S, SL) 
        fi .
endfm

fmod BASIC-STORE is 
     inc STORE . inc BASIC-VALUES .
     op val : Loc -> Value .
     op stb : Value -> Storable .
     op getVal : Storable -> Value .
     op getLoc : Value -> Loc .
     var V : Value . var L : Loc .
     eq getVal(stb(V)) = V .
     eq getLoc(val(L)) = L .
endfm

fmod CMD-IR is 
     inc EXP-IR . inc ID-IR .
     sort Cmd .
     op seq : Cmd Cmd -> Cmd [format (g o)] .
     op assign : Id Exp -> Cmd [format (g o)] . 
     op print : Exp -> Cmd [format (g o)] . 
     op cond : Exp Cmd Cmd -> Cmd [format (c o)] .
     op loop : Exp Cmd -> Cmd [format (g o)] .
     op ref : Exp -> Exp [format (y o)] .
     op deref : Id -> Exp [format (y o)] .
endfm

fmod STORE-COMPONENT is 
     inc INDEX . inc SEM-COMP .
     inc STORE . 
     op sto : -> Idx [format (b! o)] .
     op :_ : Store -> SemComp .
endfm

fmod OUTPUT is 
     inc VALUE .
     sort Output .
     subsort Value < Output .
     op noOutput : -> Output .
     op _,_ : Output Output -> Output [assoc id: noOutput] .
endfm

fmod OUTPUT-COMPONENT is 
     inc OUTPUT . inc INDEX .
     inc SEM-COMP .
     op out : -> Idx [format (b! o)] .
     op :_ : Output -> SemComp .
endfm

fmod LOC-SET-COMPONENT is 
     inc LOC-SET .
     inc INDEX . inc SEM-COMP .
     op loc : -> Idx [format (b! o)] .
     op :_ : Set{Loc} -> SemComp .
endfm

fmod CMD-AUTOMATON is 
     inc EXP-WITH-ID-AUTOMATON . inc CMD-IR .
     inc BASIC-STORE . inc STORE-COMPONENT .
     inc OUTPUT-COMPONENT .
     inc LOC-SET-COMPONENT .

     ops #ASSIGN #COND #LOOP #REF #PRINT : -> OpCode .

     op cnt : Cmd -> Control .
     op val : Cmd -> Value .

     var L : List{Control} . var I : Id . vars E E1 E2 : Exp . 
     var V : Stack{Value} . var M : List{Value} . var U : Value .
     var rho : Env . var sigma : Store . var ... : PreState .
     var Loc : Loc . vars C C1 C2 : Cmd . var R : Rat . var B : Bool .
     var O : Output . var SL : Set{Loc} .

     ---| Store semantic component
     mb (sto : sigma) : Field{Idx, SemComp} .   

     ---| Ouput semantic component
     mb (out : O) : Field{Idx, SemComp} .   

     ---| Set{Loc} semantic component
     mb (loc : SL) : Field{Idx, SemComp} .   

     ---| Sequence of commmands
     eq run( [ cnt : [ L :: cnt(seq(C1, C2)) ], 
               ... ] ) =
             [ cnt : push(push([ L ], cnt(C2)), cnt(C1)),
               ... ] .          

     ---| Assignment
     eq run( [ cnt : [ L :: cnt(assign(I, E)) ], 
               val : V, 
               ... ] ) =
             [ cnt : push(push([ L ], #ASSIGN), cnt(E)),
               val : push(V, val(I)),
               ... ] .          

     eq run( [ cnt : [ L :: #ASSIGN ],
               val : [ M :: val(I) :: U ],
               env : rho,
               sto : sigma,
               ... ] ) =  
             [ cnt : [ L ],
               val : [ M ],
               env : rho,
               sto : insert(getLoc(getVal(rho[I])), stb(U), sigma),
               ... ] .

     ---| Conditional
     eq run( [ cnt : [ L :: cnt(cond(E, C1, C2)) ],
               val : V,
               ... ] ) =
             [ cnt : push(push([ L ], #COND), cnt(E)),
               val : push(push(V, val(C2)), val(C1)),
               ... ]  . 

     eq [#COND-true] :
        run( [ cnt : [ L :: #COND ],
               val : [ M :: val(C2) :: val(C1) :: val(true) ],
               ... ] ) =  
             [ cnt : [ L :: cnt(C1)],
               val : [ M ],
               ... ] .

     eq [#COND-false] :
        run( [ cnt : [ L :: #COND ],
               val : [ M :: val(C2) :: val(C1) :: val(false) ],
               ... ] ) =  
             [ cnt : [ L :: cnt(C2)],
               val : [ M ],
               ... ] .

     ---| Unbounded repetition
     eq [loop] :
        run( [ cnt : [ L :: cnt(loop(E, C)) ],
               val : V,
               ... ] ) =
             [ cnt : push(push([ L ], #LOOP), cnt(E)),
               val : push(V, val(loop(E, C))),
               ... ]  . 

     eq [#LOOP-true] : 
        run( [ cnt : [ L :: #LOOP ],
               val : [ M :: val(loop(E, C)) :: val(true) ],
               ... ] ) =  
             [ cnt : [ L :: cnt(loop(E, C)) :: cnt(C) ],
               val : [ M ],
               ... ] .

     eq [#LOOP-false] :
        run( [ cnt : [ L :: #LOOP ],
               val : [ M :: val(loop(E, C)) :: val(false) ],
               ... ] ) =  
             [ cnt : [ L ], 
               val : [ M ],
               ... ] .

     ---| References
     eq [ref] :
        run( [ cnt : [ L :: cnt(ref(E)) ],
               ... ] ) =
             [ cnt : [ L :: #REF :: cnt(E) ],
               ... ] .

     eq [#REF] :
        run( [ cnt : [ L :: #REF ],
               val : [ M :: U ], 
               sto : sigma, 
               loc : SL,
               ... ] ) =
             [ cnt : [ L ],
               val : push([ M ], val(new(sigma))),
               sto : insert(new(sigma), stb(U), sigma),
               loc : (SL ; new(sigma)),
               ... ] .

     ---| Dereferenciation
     eq [deref] :
        run( [ cnt : [ L :: cnt(deref(I)) ],
               val : V, 
               env : rho,
               sto : sigma, 
               ... ] ) =
             [ cnt : [ L ],
               val : push(V, getVal(sigma[getLoc(getVal(rho[I]))])),
               env : rho,
               sto : sigma,
               ... ] .

     ---| Print
     eq [print] :
        run( [ cnt : [ L :: cnt(print(E)) ],
               ... ] ) =
             [ cnt : [ L :: #PRINT :: cnt(E) ],
               ... ] .

     eq [#PRINT] :
        run( [ cnt : [ L :: #PRINT ],
               val : [ M :: U ], 
               out : O, 
               ... ] ) =
             [ cnt : [ L ],
               val : [ M ],
               out : (O, U),
               ... ] .
endfm

fmod DEC-IR is 
     inc ID-IR . inc CMD-IR .
     sort Dec .
     op dec : Id Exp -> Dec [format (m o)] .
     op let : Dec Exp -> Exp [format (y o)] .
     op block : Dec Cmd -> Cmd [format (g o)] .
endfm

fmod DEC-AUTOMATON is
     inc DEC-IR . inc CMD-AUTOMATON .

     ops #DEC #LETDEC #LETEXP #BLKDEC #BLKCMD : -> OpCode .

     op cnt : Dec -> Control .
     op val : Env -> Value .
     op val : Set{Loc} -> Value .

     var L : List{Control} . var I : Id . vars E E1 E2 : Exp . var D : Dec .
     var V : Stack{Value} . var M : List{Value} . var U : Value .
     vars rho rho1 rho2 : Env . var sigma : Store . var ... : PreState .
     vars SL SL' : Set{Loc} . vars C C1 C2 : Cmd . 

     ---| Declaration
     eq [dec] :
        run( [ cnt : [ L :: cnt(dec(I, E)) ],
               val : V,
               ... ] ) =  
             [ cnt : push(push([ L ], #DEC), cnt(E)), 
               val : push(V, val(I)),
               ... ] .

     eq [#DEC] :
        run( [ cnt : [ L :: #DEC ],
               val : [ M :: val(I) :: U ],
               ... ] ) =  
             [ cnt : [ L ],
               val : push([ M ], val(I |-> bnd(U))),
               ... ] .

     ---| Let
     eq [let] : 
        run( [ cnt : [ L :: cnt(let(D, E)) ],
               val : V,
               ... ] ) = 
             [ cnt : [ L :: #LETDEC :: cnt(D) ],
               val : push(V, val(E)),
               ... ] .

     eq [#LETDEC] :
        run( [ cnt : [ L :: #LETDEC ],
               val : [ M :: val(E) :: val(rho2) ],
               env : rho1,
               ... ] ) = 
             [ cnt : [ L :: #LETEXP :: cnt(E) ], 
               val : push([ M ], val(rho1)),
               env : update(rho1, rho2),
               ... ] .

     eq [#LETEXP] :
        run( [ cnt : [ L :: #LETEXP ],
               val : [ M :: val(rho2) :: U ],
               env : rho1,
               ... ] ) = 
             [ cnt : [ L ], 
               val : [ M :: U ], 
               env : rho2,
               ... ] .

     ---| Block
     eq [block] :
        run( [ cnt : [ L :: cnt(block(D, C)) ],
               val : V,
               loc : SL,
               ... ] ) = 
             [ cnt : [ L :: #BLKDEC :: cnt(D) ],
               val : push(push(V, val(SL)), val(C)),
               loc : noLoc,
               ... ] .

     eq [#BLKDEC] :
        run( [ cnt : [ L :: #BLKDEC ],
               val : [ M :: val(C) :: val(rho2) ],
               env : rho1,
               ... ] ) = 
             [ cnt : [ L :: #BLKCMD :: cnt(C) ], 
               val : push([ M ], val(rho1)),
               env : update(rho1, rho2),
               ... ] .

     eq [#BLKCMD] : 
        run( [ cnt : [ L :: #BLKCMD ],
               val : [ M :: val(SL) :: val(rho2) ],
               env : rho1,
               sto : sigma,
               loc : SL',
               ... ] ) = 
             [ cnt : [ L ], 
               val : [ M ], 
               env : rho2,
               sto : mod(sigma, SL'),
               loc : SL,
               ... ] .
endfm

fmod FORMALS is 
     inc LIST{Id} * (sort List{Id} to Formals, 
                     sort NeList{Id} to NeFormals, 
                     op nil to nilFormals) . 
endfm

view Exp from TRIV to EXP-IR is sort Elt to Exp . endv

fmod ACTUALS is 
     inc LIST{Exp} * (sort List{Exp} to Actuals, 
                      sort NeList{Exp} to NeActuals, 
                      op nil to nilActuals) . 
endfm

fmod LAMBDA-IR is 
     inc FORMALS . inc ACTUALS .
     inc EXP-IR .  inc DEC-IR .
     sort Abs .    
     subsort Abs < Exp .
     op lambda : Formals Exp -> Abs [format (y o)] .
     op apply : Id Actuals -> Exp [format (y o)] .
endfm

fmod MATCH is
     inc FORMALS . inc VALUE-STACK-COMPONENT .
     inc BASIC-ENV .

     op match : Formals List{Value} ~> Env .
     op $match : Formals List{Value} -> Env .
     var F : Formals . var L : List{Value} . var I : Id . var V : Value .
     ceq match(F, L) = $match(F, L) if size(F) == size(L) .
     eq $match(nilFormals, empty) = mtEnv .
     eq $match((I F), (V :: L)) = I |-> bnd(V), match(F, L) .
endfm

fmod ABS-AUTOMATON is 
     inc LAMBDA-IR . inc DEC-AUTOMATON . 
     inc BASIC-ENV . inc MATCH .

     sort Clos .
     op closure : Env Formals Exp -> Clos .
     op val : Clos -> Value .
     ops #APPLY #ENDAPPLY : -> OpCode .
     op $mkControl : Actuals -> List{Control} .

     var L : List{Control} . var U : Value .
     var F : Formals . var E : Exp . var V : Stack{Value} . 
     vars rho rho1 rho2 : Env . var ... : PreState .
     var I : Id . var A : Actuals . vars M M1 M2 : List{Value} .

     eq $mkControl(nilActuals) = empty .
     eq $mkControl((E A)) = cnt(E) :: $mkControl(A) .

     eq [lambda] :
        run( [ cnt : [ L :: cnt(lambda(F, E)) ], val : V, env : rho, ... ] ) = 
             [ cnt : [ L ], val : push(V, val(closure(rho, F, E))), env : rho, ... ] .

     eq [apply] :
        run( [ cnt : [ L :: cnt(apply(I, A))], val : V, env : rho, ... ] ) = 
             [ cnt : [ L :: #APPLY :: $mkControl(A) ], 
               val : push(V, getVal(rho[I])), 
               env : rho, ... ] .

     eq [#APPLY] :
        run( [ cnt : [ L :: #APPLY ], 
               val : [ M1 :: val(closure(rho2, F, E)) :: M2 ], 
               env : rho1, 
               ... ] ) = 
             [ cnt : [ L :: #ENDAPPLY :: cnt(E) ], 
               val : [ M1 :: val(rho1) ], 
               env : update(rho2, match(F, M2)), ... ] .

     eq [#ENDAPPLY] :
        run( [ cnt : [ L :: #ENDAPPLY ], 
               val : [ M :: val(rho2) :: U ], 
               env : rho1, 
               ... ] ) = 
             [ cnt : [ L ], 
               val : [ M :: U ], 
               env : rho2, ... ] .
endfm

fmod REC-IR is
     inc LAMBDA-IR . inc ACTUALS .
     op rec : Id Abs -> Dec [format (m o)] .
     op recall : Id Actuals -> Exp [format (y o)] .
endfm

fmod REC-ABS-AUTOMATON is
     inc ABS-AUTOMATON . inc REC-IR .

     sort Reclos .
     op reclosure : Formals Exp Env Env -> Reclos .
     op val : Reclos -> Value .
     op unfold : Env -> Env .
     op reclose : Env Env -> Env .
     op #RECALL : -> OpCode .

     vars rho rho1 rho2 rho3 : Env .
     var F : Formals . var E : Exp .
     var I : Id . var U : Value .
     var L : List{Control} . var V : Stack{Value} .
     vars M M1 M2 : List{Value} . var A : Actuals .
     var ... : PreState .

     eq unfold(rho) = reclose(rho, rho) .
     eq reclose(rho1, I |-> bnd(val(closure(rho2, F, E)))) =
        I |-> bnd(val(reclosure(F, E, rho2, rho1))) .
     eq reclose(rho1, I |-> bnd(val(reclosure(F, E, rho2, rho3)))) = 
        I |-> bnd(val(reclosure(F, E, rho2, rho1))) .
     eq reclose(rho, (rho1 , rho2)) = reclose(rho, rho1) , reclose(rho, rho2) .
     eq reclose(rho, mtEnv) = mtEnv .
     eq reclose(rho, I |-> bnd(U)) = I |-> bnd(U) [owise] .

     eq [rec] : 
        run( [ cnt : [ L :: cnt(rec(I, lambda(F, E))) ], 
               val : V, 
               env : rho, 
               ... ] ) = 
             [ cnt : [ L ], 
               val : push(V, val(unfold(I |-> bnd(val(closure(rho, F, E)))))),
               env : rho, 
               ... ] . 

     eq [recall] :
        run( [ cnt : [ L :: cnt(recall(I, A))], val : V, env : rho, ... ] ) = 
             [ cnt : [ L :: #RECALL :: $mkControl(A) ], 
               val : push(V, getVal(rho[I])), 
               env : rho, 
               ... ] .

     eq [#RECALL] :
        run( [ cnt : [ L :: #RECALL ], 
               val : [ M1 :: val(reclosure(F, E, rho1, rho2)) :: M2 ], 
               env : rho3, 
               ... ] ) = 
             [ cnt : [ L :: #ENDAPPLY :: cnt(E) ], 
               val : [ M1 :: val(rho3) ], 
               env : update(rho1, update(unfold(rho2), match(F, M2))), 
               ... ] .
endfm

fmod PI-IR is inc BASIC-VALUES . inc EXP-IR . inc CMD-IR . inc DEC-IR . inc LAMBDA-IR . inc REC-IR . endfm
